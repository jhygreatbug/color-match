<style>
.game-func {
  display: flex;
}
</style>
<template>
  <view class="game">{{mode}} {{level}}</view>
  <game-box></game-box>
  <view class="game-func">
    <view wx:if="{{prevLevel}}" @tap="prev">prev</view>
    <view wx:if="{{nextLevel}}" @tap="next">next</view>
  </view>
  <view>time: {{dispTime}}</view>
  <view>perfect: {{record.perfect}}</view>
  <view>speedRush: {{record.speedRush}}</view>
  <view>shortestTime: {{record.shortestTime}}</view>
</template>

<script>
  import wepy from 'wepy';
  import Config from '../config/config';
  import GameBox from '../components/game-box';

  const punishmentCoefficient = Config.punishmentCoefficient;

  export default class RoundGame extends wepy.page {
    config = {
      backgroundColor: '#0b0218',
      backgroundTextStyle: 'light',
      backgroundColorTop: '#0b0218',
      backgroundColorBottom: '#0b0218',
      navigationBarBackgroundColor: '#0b0218',
      navigationBarTitleText: '★☆',
      navigationBarTextStyle: 'white'
    }
    components = {
      'game-box': GameBox
    }
    data = {
      mode: '',
      level: '',
      record: {},
      prevLevel: null,
      nextLevel: null,
      startTimestamp: 0,
      currentTimestamp: 0,
      punishmentTime: 0
    }

    computed = {
      dispTime () {
        const time = this.gameTime;
        const minute = Math.floor(time / 60);
        const secound = time % 60;
        const padTime = t => t >= 10 ? t : `0${t}`;
        return `${padTime(minute)}:${padTime(secound)}`;
      },
      gameTime () {
        return Math.floor((this.currentTimestamp - this.startTimestamp) / 1000 + this.punishmentTime * punishmentCoefficient);
      }
    }

    methods = {
    }

    events = {
      'game.complete' () {
        clearInterval(this.timer);

        // 更新游戏记录
        const gameConfig = Config.round[this.mode][this.level];
        const key = `round/${this.mode}`;
        let gameRecord;
        try {
          gameRecord = wepy.getStorageSync(key) || {};
        } catch (e) {}
        const thisRecord = gameRecord[this.level] || {};
        thisRecord.perfect = thisRecord.perfect || this.punishmentTime === 0;
        thisRecord.shortestTime = Math.min(thisRecord.shortestTime || Number.MAX_SAFE_INTEGER, this.gameTime);
        thisRecord.speedRush = thisRecord.speedRush || this.gameTime <= gameConfig.limitTime;
        gameRecord[this.level] = thisRecord;
        try {
          wepy.setStorageSync(key, gameRecord);
        } catch (e) {}

        this.gameTime = 0;

        if (this.nextLevel) {
          this.next();
        } else {
          wepy.navigateBack({delta: 1});
        }
      },
      'game.match_error' () {
        this.punishmentTime++;
      }
    }

    onLoad(param) {
      this.mode = param.mode;
      this.level = param.level;
      this.init();
    }

    init() {
      // 更新配置
      const gameConfig = Config.round[this.mode][this.level];
      this.prevLevel = gameConfig.prev;
      this.nextLevel = gameConfig.next;

      const key = `round/${this.mode}`;
      try {
        this.record = wepy.getStorageSync(key)[this.level] || {};
      } catch (e) {}

      // 重置参数
      this.punishmentTime = 0;
      this.startTimestamp = this.currentTimestamp = new Date().getTime();
      clearInterval(this.timer);
      this.timer = setInterval(_ => {
        this.currentTimestamp = new Date().getTime();
        this.$apply();
      }, 1000);

      // 启动游戏
      this.$invoke('game-box', 'init', gameConfig);
    }

    next() {
      if (!this.next) return;
      this.level = this.nextLevel;
      this.init();
    }

    prev() {
      if (!this.prev) return;
      this.level = this.prevLevel;
      this.init();
    }
  }
</script>
