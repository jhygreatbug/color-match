<style lang="postcss">
.game-wrap {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.game-main {
  flex: 1;
}

.game-footer {
  position: relative;
  flex: none;
  height: 80rpx;
}

.game-footer-left,
.game-footer-center,
.game-footer-right {
  position: absolute;
  top: 0;
  height: 100%;
  display: flex;
  align-items: center;
}

.game-footer-left {
  left: 0;
}

.game-footer-center {
  left: 50%;
  transform: translate3d(-50%, 0, 0);
}

.game-footer-right {
  right: 0;
}

.game-footer-perfect,
.game-footer-speed {
  width: 36rpx;
  height: 36rpx;
}
.game-footer-perfect {
  margin-left: 20rpx;
}
.game-footer-speed {
  margin-left: 10rpx;
}
.game-footer-prev,
.game-footer-next{
  width: 60rpx;
  height: 60rpx;
}
.game-footer-next {
  margin-left: 10rpx;
}
.game-footer-restart{
  width: 48rpx;
  height: 48rpx;
  background-size: 48rpx;
  margin-left: 10rpx;
}

.game-footer-time {
  margin-left: 16rpx;
  font-size: 24rpx;
  line-height: 1;
}

.game-footer-prev,
.game-footer-restart,
.game-footer-next,
.game-footer-perfect,
.game-footer-speed {
  background-position: center center;
  background-size: 32rpx;
  background-repeat: no-repeat;
}

.game-footer-prev {
  background-image: svg-load('left-arrow.svg');
}
.game-footer-restart {
  background-image: svg-load('reload.svg');
}
.game-footer-next {
  background-image: svg-load('right-arrow.svg');
}
.game-footer-perfect {
  background-image: svg-load('star.svg', fill=gray);
}
.game-footer-perfect.active {
  background-image: svg-load('star.svg');
}
.game-footer-speed {
  background-image: svg-load('time.svg', fill=gray);
}
.game-footer-speed.active {
  background-image: svg-load('time.svg');
}
</style>
<template>
  <view class="game-wrap" @tap="tapGame()">
    <view class="game-main">
      <game-box></game-box>
    </view>
    <view class="game-footer">
      <view class="game-footer-left">
        <view class="game-footer-perfect {{record.perfect ? 'active' : ''}}"></view>
        <view class="game-footer-speed {{record.speedRush ? 'active' : ''}}"></view>
        <view class="game-footer-time">{{dispTime}}</view>
      </view>
      <view class="game-footer-center">
        <view class="game-footer-prev" @tap="prev"></view>
        <view class="game-footer-restart" @tap="restart"></view>
        <view class="game-footer-next" @tap="next"></view>
      </view>
      <view class="game-footer-right">
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import Config from '../config/config';
  import GameBox from '../components/game-box';

  const punishmentCoefficient = Config.punishmentCoefficient;

  export default class RoundGame extends wepy.page {
    config = {
      backgroundColor: '#0b0218',
      backgroundTextStyle: 'light',
      backgroundColorTop: '#0b0218',
      backgroundColorBottom: '#0b0218',
      navigationBarBackgroundColor: '#0b0218',
      navigationBarTitleText: '',
      navigationBarTextStyle: 'white'
    }
    components = {
      'game-box': GameBox
    }
    data = {
      mode: '',
      name: '',
      level: '',
      record: {},
      prevLevel: null,
      nextLevel: null,
      startTimestamp: 0,
      currentTimestamp: 0,
      punishmentTime: 0
    }

    computed = {
      dispTime () {
        const time = this.gameTime;
        const minute = Math.floor(time / 60);
        const secound = time % 60;
        const padTime = t => t >= 10 ? t : `0${t}`;
        return `${padTime(minute)}:${padTime(secound)}`;
      },
      gameTime () {
        return Math.floor((this.currentTimestamp - this.startTimestamp) / 1000 + this.punishmentTime * punishmentCoefficient);
      }
    }

    methods = {
      tapGame () {
        this.$invoke('game-box', 'cancelSelectCell');
      }
    }

    events = {
      'game.complete' () {
        clearInterval(this.timer);

        // 更新游戏记录
        const gameConfig = Config.round[this.mode][this.level];
        const key = `round/${this.mode}`;
        let gameRecord;
        try {
          gameRecord = wepy.getStorageSync(key) || {};
        } catch (e) {}
        const thisRecord = gameRecord[this.level] || {};
        thisRecord.perfect = thisRecord.perfect || this.punishmentTime === 0;
        thisRecord.shortestTime = Math.min(thisRecord.shortestTime || Number.MAX_SAFE_INTEGER, this.gameTime);
        thisRecord.speedRush = thisRecord.speedRush || this.gameTime <= gameConfig.limitTime;
        gameRecord[this.level] = thisRecord;
        try {
          wepy.setStorageSync(key, gameRecord);
        } catch (e) {}

        this.gameTime = 0;

        if (this.nextLevel) {
          this.next();
        } else {
          wepy.navigateBack({delta: 1});
        }
      },
      'game.match_error' () {
        this.punishmentTime++;
      }
    }

    onLoad(param) {
      const roundConfig = Config.roundInfo[param.mode];
      this.mode = param.mode;
      this.level = param.level;
      this.name = roundConfig.name;
      this.init();
    }

    init() {
      // 更新配置
      const gameConfig = Config.round[this.mode][this.level];
      this.prevLevel = gameConfig.prev;
      this.nextLevel = gameConfig.next;

      wepy.setNavigationBarTitle({ title: `${this.name}-Level${this.level}` });

      const key = `round/${this.mode}`;
      try {
        this.record = wepy.getStorageSync(key)[this.level] || {};
      } catch (e) {}

      // 重置参数
      this.punishmentTime = 0;
      this.startTimestamp = this.currentTimestamp = new Date().getTime();
      clearInterval(this.timer);
      this.timer = setInterval(_ => {
        this.currentTimestamp = new Date().getTime();
        this.$apply();
      }, 1000);

      // 启动游戏
      this.$invoke('game-box', 'init', gameConfig);
    }

    next() {
      if (!this.nextLevel) {
        wepy.navigateBack({delta: 1});
        return;
      }
      this.level = this.nextLevel;
      this.init();
    }

    prev() {
      if (!this.prevLevel) {
        wepy.navigateBack({delta: 1});
        return;
      }
      this.level = this.prevLevel;
      this.init();
    }
  }
</script>
