<style lang="postcss">
  .levels {
    width: 480rpx;
    margin: 0 auto;
    margin-top: 60rpx;
  }
  .level-item {
    transition: transform 200ms ease;
    transform: scale(1);
  }
  .level-item-hover {
    transform: scale(1.1);
  }
  .level-item-con {
    display: flex;
    height: 100%;
    padding: 20rpx;
    margin-bottom: 36rpx;
    border-radius: 12rpx;
    background-color: #ccc;
    color: rgba(255, 255, 255, .6);
    font-size: 32rpx;
    line-height: 40rpx;
    align-items: center;
    transition: transform 400ms ease;
    transform: rotateX(0) translate3d(0, 0, 0);
    transform-origin: top;
  }
  .levels-hide .level-item-con {
    transform: rotateX(90deg) translate3d(0, 50rpx, 0);
  }
  .level-title {
    flex: auto;
  }
  .level-perfect,
  .level-speed {
    flex: none;
    width: 26rpx;
    height: 26rpx;
    background-position: center;
    background-size: 100% 100%;
    background-repeat: no-repeat;
    opacity: 0.6;
  }
  .level-perfect {
    margin-right: 14rpx;
    background-image: svg-load('star.svg', fill=#fff);
  }
  .level-speed {
    background-image: svg-load('time.svg', fill=#fff);
  }
</style>
<template>
  <view class="levels {{showPage ? '' : 'levels-hide'}}">
    <navigator
      class="level-item"
      wx:for="{{levelInfo}}" wx:for-item="level" wx:key="key"
      url="/pages/round-game?mode={{mode}}&level={{level.name}}"
      hover-class="level-item-hover"
      hover-start-time="0"
      hover-stay-time="0">
      <view
        class="level-item-con"
        style="{{'background-image: linear-gradient(to right, ' + levelStartColors[index] + ', ' + levelEndColors[index] + ');background-image: -webkit-linear-gradient(to right,' + levelStartColors[index] + ', ' + levelEndColors[index] + '); transition-delay: ' + index * 80 + 'ms;'}}">
        <view class="level-title">Level {{level.name}}</view>
        <view class="level-perfect" wx:if="{{level.perfect}}"></view>
        <view class="level-speed" wx:if="{{level.speedRush}}"></view>
      </view>
    </navigator>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import Config from '../config/config';
  import Color from '../lib/Color';
  import generateBlockColor from '../common/generateBlockColor';
  export default class Round extends wepy.page {
    config = {
      backgroundColor: '#0b0218',
      backgroundTextStyle: 'light',
      backgroundColorTop: '#0b0218',
      backgroundColorBottom: '#0b0218',
      navigationBarBackgroundColor: '#0b0218',
      navigationBarTitleText: '',
      navigationBarTextStyle: 'white'
    }
    components = {
    }

    data = {
      mode: '',
      showPage: false,
      roundInfo: {},
      levelInfo: {},
      levelStartColors: [],
      levelEndColors: []
    }

    computed = {
    }

    methods = {
      itemBackground (index) {
        return `
          background-image: linear-gradient(to ${this.levelStartColors[index]}, ${this.levelEndColors[index]});
          background-image: -webkit-linear-gradient(to ${this.levelStartColors[index]}, ${this.levelEndColors[index]});`;
      }
    }

    events = {
    }

    onLoad(param) {
      this.mode = param.mode;
      this.roundConfig = Config.roundInfo[param.mode];
      wepy.setNavigationBarTitle({ title: this.roundConfig.name });

      // 生成颜色
      const colorCount = this.roundConfig.count;
      const topLeftColor = new Color(this.roundConfig.color);
      const {topRightColor, bottomLeftColor, bottomRightColor} = generateBlockColor(topLeftColor);
      this.levelStartColors = Color.interpolation(topLeftColor, bottomLeftColor, colorCount).map(item => item.toHexString());
      this.levelEndColors = Color.interpolation(topRightColor, bottomRightColor, colorCount).map(item => item.toHexString());
      console.log(colorCount, this.levelStartColors, this.levelEndColors)
    }

    onShow() {
      // 读取游戏记录
      const recordKey = `round/${this.mode}`;
      let records = {};
      try {
        records = wepy.getStorageSync(recordKey) || {}
      } catch (e) {}

      // 组合关卡和记录数据
      const levelConfig = Config.round[this.mode];
      const levelInfo = [];
      let levelKey = this.roundConfig.startLevel;
      let level = levelConfig[levelKey];
      while (typeof level !== 'undefined') {
        const levelRecord = records[levelKey] || {};
        levelInfo.push({
          name: levelKey,
          perfect: levelRecord.perfect,
          speedRush: levelRecord.speedRush
        });
        levelKey = level.next;
        level = levelConfig[levelKey];
      }
      this.levelInfo = levelInfo;

      setTimeout(_ => {
        this.showPage = true;
        this.$apply();
      }, 300);
    }

    onHide() {
      this.showPage = false;
    }
  }
</script>
