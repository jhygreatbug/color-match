<style lang="postcss">
  .home-section {
    display: grid;
    grid-gap: 50rpx;
    grid-template-columns: repeat(2, 1fr);
    grid-auto-flow: row;
    margin: 0 auto;
    margin-top: 100rpx;
    width: 520rpx;
  }
  .home-card {
    position: relative;
    display: flex;
    width: 100%;
    height: 100%;
    align-items: center;
    justify-content: center;
  }
  .home-card-perfect,
  .home-card-speed {
    position: absolute;
    top: 0;
    width: 32rpx;
    height: 32rpx;
    background-size: 24rpx 24rpx;
    background-repeat: no-repeat;
    background-position: center;
    transition: transform 300ms cubic-bezier(.07,.38,.43,1.29);
    transform: scale(1);
    transform-origin: top;
  }
  .home-card-hide .home-card-perfect,
  .home-card-hide .home-card-speed {
    opacity: 0;
    transform: scale(1, 0);
  }
  .home-card-perfect {
    background-color: #ffda44;
  }
  .home-card-speed {
    background-color: #fa8980;
  }
  .home-card-perfect {
    right: 68rpx;
    background-image: svg-load('star.svg');
  }
  .home-card-speed {
    right: 18rpx;
    background-image: svg-load('time.svg');
  }
  .home-card-perfect:before,
  .home-card-perfect:after,
  .home-card-speed:before,
  .home-card-speed:after {
    content: '';
    position: absolute;
    bottom: -8rpx;
    display: block;
    border: 16rpx solid transparent;
    border-bottom-width: 8rpx;
    border-top-width: 0;
  }
  .home-card-perfect:before,
  .home-card-speed:before {
    left: 0;
  }
  .home-card-perfect:before {
    border-left-color: #ffda44;
  }
  .home-card-speed:before {
    border-left-color: #fa8980;
  }
  .home-card-perfect:after,
  .home-card-speed:after {
    right: 0;
  }
  .home-card-perfect:after {
    border-right-color: #ffda44;
  }
  .home-card-speed:after {
    border-right-color: #fa8980;
  }
</style>
<template>
  <view class="home-section" wx:if="{{showPage}}">
    <repeat wx:for="{{round}}" wx:for-item="mode" wx:key="key">
      <c-simple type="progress" :progress="roundInfo[mode].progress" :colors.sync="colors[mode]" :delay="150 * index" :show.sync="showSection">
        <navigator slot="progress" url="/pages/round?mode={{mode}}" class="home-card {{showSection ? '' : 'home-card-hide'}}">
          <view class="home-card-content">{{roundConfig[mode].name}}</view>
          <view wx:if="{{roundInfo[mode].perfect}}" class="home-card-perfect" style="transition-delay: {{200 * index + 600}}ms"></view>
          <view wx:if="{{roundInfo[mode].speedRush}}" class="home-card-speed" style="transition-delay: {{200 * index + 700}}ms"></view>
        </navigator>
      </c-simple>
    </repeat>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import Config from '../config/config';
  import SimpleCard from '../components/cards/simple-card';
  import Color from '../lib/Color';
  export default class Index extends wepy.page {
    config = {
      backgroundColor: '#0b0218',
      backgroundTextStyle: 'light',
      backgroundColorTop: '#0b0218',
      backgroundColorBottom: '#0b0218',
      navigationBarBackgroundColor: '#0b0218',
      navigationBarTitleText: 'color match',
      navigationBarTextStyle: 'white'
    }
    components = {
      'c-simple': SimpleCard
    }

    data = {
      showPage: true,
      showSection: false,
      round: Config.displayRound,
      roundConfig: Config.roundInfo,
      roundInfo: {},
      colors: {}
    }

    computed = {
    }

    methods = {
    }

    events = {
    }

    onShow() {
      this.updateRoundInfo();

      this.generateColor();

      this.showSection = false;
      this.showPage = true;
      setTimeout(_ => {
        this.showSection = true;
        this.$apply();
      }, 500);
    }

    onHide() {
      this.showPage = false;
    }

    generateColor () {
      this.round.forEach(roundKey => {
        if (typeof this.roundInfo[roundKey] === 'undefined') return;
        const topLeftColor = new Color(this.roundConfig[roundKey].color);
        const topRightColor = topLeftColor.hue(-20).saturation(-10);
        const bottomLeftColor = topLeftColor.lightness(-8);
        const bottomRightColor = bottomLeftColor.hue(-10).lightness(-8);
        const progress = this.roundInfo[roundKey].progress;
        const width = Math.floor(progress * 5 >= 1 ? 5 : progress * 5 * 5 % 5);
        const height = Math.floor(progress * 5);
        const colors = Color.interpolation2d(topLeftColor, topRightColor, bottomLeftColor, bottomRightColor, width, height);
        this.colors[roundKey] = colors.map(line => line.map(item => item.toString()));
      });
    }

    updateRoundInfo () {
      const roundInfo = {};
      try {
        const res = wepy.getStorageInfoSync();
        res.keys.forEach(storageKey => {
          const keys = storageKey.split('/');
          if (keys[0] !== 'round') return;
          const roundKey = keys[1];
          const roundRecord = wepy.getStorageSync(storageKey);
          let completeCount = 0;
          let perfect = true;
          let speedRush = true;
          for (let key in roundRecord) {
            const level = roundRecord[key];
            completeCount++;
            perfect = level.perfect && perfect;
            speedRush = level.speedRush && speedRush;
          }
          const roundInfoItem = {};
          const roundConfigItem = this.roundConfig[roundKey];
          roundInfoItem.completeCount = completeCount;
          roundInfoItem.perfect = perfect && completeCount === roundConfigItem.count;
          roundInfoItem.speedRush = speedRush && completeCount === roundConfigItem.count;
          roundInfoItem.progress = completeCount / roundConfigItem.count;
          roundInfo[roundKey] = roundInfoItem;
        });
      } catch (e) {}
      this.roundInfo = roundInfo;
    }
  }
</script>
